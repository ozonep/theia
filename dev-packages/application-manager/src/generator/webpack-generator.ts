/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

import { sep, basename } from 'path';
import { pathExists, readFile } from 'fs-extra';
import { AbstractGenerator } from './abstract-generator';

export class WebpackGenerator extends AbstractGenerator {

    async generate(): Promise<void> {
        await this.write(this.genConfigPath, this.compileWebpackConfig());
        if (await this.shouldGenerateUserWebpackConfig()) {
            await this.write(this.configPath, this.compileUserWebpackConfig());
        }
    }

    protected async shouldGenerateUserWebpackConfig(): Promise<boolean> {
        if (!(await pathExists(this.configPath))) {
            return true;
        }
        const content = await readFile(this.configPath, 'utf8');
        return content.indexOf('gen-webpack') === -1;
    }

    get configPath(): string {
        return this.pck.path('webpack.config.js');
    }

    get genConfigPath(): string {
        return this.pck.path('gen-webpack.config.js');
    }

    protected resolve(moduleName: string, path: string): string {
        return this.pck.resolveModulePath(moduleName, path).split(sep).join('/');
    }

    protected compileWebpackConfig(): string {
        return `/**
 * Don't touch this file. It will be regenerated by theia build.
 * To customize webpack configuration change ${this.configPath}
 */
// @ts-check
const path = require('path');
const webpack = require('webpack');
const yargs = require('yargs');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const TerserPlugin = require("terser-webpack-plugin");

const outputPath = path.resolve(__dirname, 'lib');
const mode = "production";
const staticCompression = true;
const development = false;

const monacoEditorCorePath = '${this.resolve('ozonep-monaco-editor-core', 'min/vs')}';

const plugins = [new CopyWebpackPlugin({
    patterns: [{ from: monacoEditorCorePath, to: 'vs' }]
})];
// it should go after copy-plugin in order to compress monaco as well
if (staticCompression) {
    plugins.push(new CompressionPlugin());
}
plugins.push(new webpack.ProvidePlugin({
    process: 'process/browser.js',
    Buffer: ['buffer', 'Buffer']
  })
)

module.exports = {
    entry: path.resolve(__dirname, 'src-gen/frontend/index.js'),
    output: {
        filename: 'bundle.js',
        path: outputPath
    },
    target: ['web'],
    mode,
    node: {
        global: true,
        __filename: true,
        __dirname: true,
    },
    optimization: {
        minimize: true,
        minimizer: [new TerserPlugin({ parallel: true })]
      },
    module: {
        rules: [
            {
                test: /worker-main\\.js$/,
                use: [{
                    loader: 'worker-loader', 
                loader: 'worker-loader',
                    loader: 'worker-loader', 
                    options: { filename: 'worker-ext.[hash].js', esModule: false }
                }],
                
            },
            {
                test: /\\.css$/,
                exclude: /materialcolors\\.css$|\\.useable\\.css$/,
                use: ['style-loader', 'css-loader']
            },
            {
                test: /materialcolors\\.css$|\\.useable\\.css$/,
                use: [
                  {
                    loader: 'style-loader',
                    options: {
                      injectType: 'lazySingletonStyleTag',
                      esModule: false,
                      attributes: { id: 'theia-theme' },
                    }
                  },
                  'css-loader'
                ]
            },
            {
                test: /\\.(ttf|eot|svg)(\\?v=\\d+\\.\\d+\\.\\d+)?$/,
                type: 'asset/inline'
            },
            {
                test: /\\.(jpg|png|gif)$/,
                type: 'asset/resource'
            },
            {
                test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,
                type: 'asset/inline'
            },
            {
                test: /\\.wasm$/,
                type: 'asset/resource'
            },
            {
                test: /\\.plist$/,
                type: 'asset/resource'
            },
            {
                test: /\\.js$/,
                // include only es6 dependencies to transpile them to es5 classes
                include: /vscode-ws-jsonrpc|vscode-jsonrpc|vscode-languageserver-protocol|vscode-languageserver-types/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env'],
                        plugins: [
                            '@babel/plugin-transform-runtime',
                            '@babel/plugin-transform-classes'
                        ],
                        sourceType: "unambiguous",
                        targets: {
                            "chrome": "87",
                            "node": "current"
                        }
                    }
                }
            }
        ]
    },
    resolve: {
        extensions: ['.js'],
        fallback: {
            "crypto": false,
            "net": false,
            "fs": false,
            "child_process": false,
            "path": require.resolve("path-browserify"),
            "os": require.resolve("os-browserify/browser"),
            "timers": require.resolve("timers-browserify"),
            "buffer": require.resolve("buffer"),
            "process": require.resolve("process/browser"),
            "assert": require.resolve("assert"),
            "constants": require.resolve("constants-browserify"),
            "domain": require.resolve("domain-browser"),
            "events": require.resolve("events"),
            "http": require.resolve("stream-http"),
            "https": require.resolve("https-browserify"),
            "stream": require.resolve("stream-browserify"),
            "sys": require.resolve("util"),
            "url": require.resolve("url"),
            "util": require.resolve("util"),
            "zlib": require.resolve("browserify-zlib")
        },
        alias: {
            'vs': path.resolve(outputPath, monacoEditorCorePath)
        }
    },
    plugins,
    stats: {
        warnings: false,
        errorDetails: true,
        children: true
    }
};`;
    }

    protected compileUserWebpackConfig(): string {
        return `/**
 * This file can be edited to customize webpack configuration.
 * To reset delete this file and rerun theia build again.
 */
// @ts-check
const config = require('./${basename(this.genConfigPath)}');

/**
 * Expose bundled modules on window.theia.moduleName namespace, e.g.
 * window['theia']['@theia/core/lib/common/uri'].
 * Such syntax can be used by external code, for instance, for testing.
config.module.rules.push({
    test: /\\.js$/,
    loader: require.resolve('@theia/application-manager/lib/expose-loader')
}); */

module.exports = config;`;
    }

}
